// <auto-generated />
using System;
using CodingPlatform.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodingPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220906144411_AddUserTournamentPartecipations")]
    partial class AddUserTournamentPartecipations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodingPlatform.Domain.Entities.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("UserTournamentPartecipationsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserTournamentPartecipationsId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("CodingPlatform.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UserTournamentPartecipationsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserTournamentPartecipationsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CodingPlatform.Domain.Entities.UserTournamentPartecipations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserTournamentPartecipations");
                });

            modelBuilder.Entity("CodingPlatform.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("CodingPlatform.Domain.Entities.User", "Admin")
                        .WithMany("TournamentsAdmin")
                        .HasForeignKey("AdminId");

                    b.HasOne("CodingPlatform.Domain.Entities.UserTournamentPartecipations", null)
                        .WithMany("Tournaments")
                        .HasForeignKey("UserTournamentPartecipationsId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("CodingPlatform.Domain.Entities.User", b =>
                {
                    b.HasOne("CodingPlatform.Domain.Entities.UserTournamentPartecipations", null)
                        .WithMany("Users")
                        .HasForeignKey("UserTournamentPartecipationsId");
                });

            modelBuilder.Entity("CodingPlatform.Domain.Entities.User", b =>
                {
                    b.Navigation("TournamentsAdmin");
                });

            modelBuilder.Entity("CodingPlatform.Domain.Entities.UserTournamentPartecipations", b =>
                {
                    b.Navigation("Tournaments");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
